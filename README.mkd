# MiniJava to RISC-V Compiler

![Java](https://img.shields.io/badge/java-%23ED8B00.svg?style=flat&logo=openjdk&logoColor=white)
![Bash Script](https://img.shields.io/badge/bash_script-%23121011.svg?style=flat&logo=gnu-bash&logoColor=white)

A complete compiler implementation that translates MiniJava programs through multiple intermediate representations to executable RISC-V assembly code.

## Project Overview

A multi-stage compiler that:

-   Parses MiniJava (Java subset with classes, inheritance, arrays, and method calls)
-   Performs semantic analysis and type checking
-   Generates intermediate representations (IR) using Sparrow
-   Optimizes code through register allocation
-   Produces executable RISC-V assembly

### Pipeline

1. **Parsing and Syntax Analysis** ([MiniJavaParser.java](src/parse/java/minijava/MiniJavaParser.java))
    - Parses the inputted MiniJava program and checks for valid syntax against the MiniJava grammar
    - Generates abstract syntax tree (AST) representation
    - Handles object-oriented constructs including classes and inheritance
2. **Type Checking and Semantic Analysis** ([Typecheck.java](src/main/java/Typecheck/Typecheck.java))
    - Performs static type checking with inheritance support
    - Validates method signatures and variable declarations
    - Ensures type safety across class hierarchies
3. **High-Level IR Generation (Sparrow)** ([J2S.java](src/main/java/J2S/J2S.java))
    - Translates MiniJava AST to Sparrow intermediate representation
    - Implements class layout optimization and method dispatch tables
    - Handles object allocation and inheritance resolution
4. **Low-Level IR Translation (Sparrow-V)** ([S2SV.java](src/main/java/S2SV/S2SV.java))
    - Converts Sparrow to Sparrow-V (register-based IR)
    - Performs register allocation and optimization
    - Eliminates high-level constructs for efficient code generation
5. **Code Generation (RISC-V)** ([SV2V.java](src/main/java/SV2V/SV2V.java))
    - Generates optimized RISC-V assembly from Sparrow-V
    - Implements stack frame management and calling conventions
    - Produces executable assembly with proper register usage

## Key Features

-   **Multi-Stage IR Design:** Two intermediate representations to enable modular optimization during MiniJava to RISC-V translation
-   **Object-Oriented Support:** Full inheritance, method dispatch, and dynamic allocation
-   **Register Allocation:** Efficient mapping of virtual registers to RISC-V physical registers using Linear Scan Register Allocation algorithm
-   **Memory Management:** Stack frame optimization and heap allocation strategies
-   **Visitor Pattern Implementation:** Clean separation of concerns using visitor pattern for traversing AST

## Build and Usage

To run the pipeline, run:

```bash
./pipeline.sh input.java
```

Replace `input.java` with any MiniJava program you want to enter. File extension must be `java`.

Sample output is provided in [pipeline_output](pipeline_output)

**Note:** _`input.java` must be a valid MiniJava program (syntactically and semantically correct) for pipeline to complete successfully. If it is not, the pipeline will crash._

## Next Steps

-   Currently working on graceful error handling in case of invalid program input to the pipeline
-   Bug fixes in progress for object inheritance in Sparrow and Sparrow-V code generation
